name: Prevent Non-Admin Merges

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, closed]  # Trigger on PR events

jobs:
  check-admin:
    runs-on: ubuntu-latest
    steps:
      - name: Check if the user is an admin
        id: check_admin
        uses: actions/github-script@v6
        with:
          script: |
            const prUser = context.payload.pull_request.user.login;
            
            // Fetch collaborators who have admin permissions in the repo
            const { data: collaborators } = await github.rest.repos.listCollaborators({
              owner: context.repo.owner,
              repo: context.repo.repo,
              affiliation: 'direct'
            });

            // Check if the user has admin privileges
            const isAdmin = collaborators.some(collaborator => collaborator.permissions.admin && collaborator.login === prUser);
            // Output the result
            if (!isAdmin) {
              console.log(User ${prUser} is not an admin. Blocking the merge.);
              return 'non-admin';  // Return non-admin status for later steps
            } else {
              console.log(User ${prUser} is an admin. Merge allowed.);
              return 'admin';  // Return admin status for later steps
            }
        
  fail-merge:
    needs: check-admin
    runs-on: ubuntu-latest
    if: needs.check-admin.outputs.result == 'non-admin'  # Only run this job if the user is not an admin
    steps:
      - name: Block merge attempt for non-admin users
        run: |
          echo "Error: You do not have admin privileges to merge to the main branch."
          exit 1  # Fail the action to block the merge
          
  # Optional: This job will always pass and provide a success message if the user is an admin
  success:
    needs: check-admin
    runs-on: ubuntu-latest
    if: needs.check-admin.outputs.result == 'admin'
    steps:
      - name: Allow merge
        run: echo "User is an admin. Merge allowed."
